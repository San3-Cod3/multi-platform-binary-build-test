name: Build Python Binaries

on:
  push:
  workflow_dispatch:

jobs:
  ############################################
  # Android Build Job
  ############################################
  build-android:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: /home/runner/.buildozer/android/platform/android-sdk
      ANDROID_NDK_ROOT: /home/runner/.buildozer/android/platform/android-ndk-r25b
      VERSION: v1.0.0
    steps:
      - uses: actions/checkout@v4  # Checkout repo code

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: android-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: android-pip-

      - run: pip install --upgrade buildozer cython
        shell: bash

      - name: Create custom pyjnius recipe
        run: |
          mkdir -p recipes/pyjnius
          cat << EOF > recipes/pyjnius/__init__.py
          from pythonforandroid.recipe import CythonRecipe
          class PyjniusRecipe(CythonRecipe):
              version = 'c7ae8b85'
              url = 'https://github.com/kivy/pyjnius/archive/c7ae8b85cc315d5283f77e930fa989b72b59c902.zip'
              call_hostpython_via_targetpython = False
              install_in_hostpython = False
          recipe = PyjniusRecipe()
          EOF
        shell: bash

      # Generate buildozer.spec on-the-fly
      - name: Generate buildozer.spec
        run: |
          cat <<EOT > buildozer.spec
          [app]
          title = Grok Farewell
          package.name = grokfarewell
          package.domain = org.example
          source.include_exts = py
          source.dir = .
          version = 0.1
          requirements = python3,kivy,pyjnius
          orientation = portrait

          [buildozer]
          log_level = 2
          android.api = 33
          android.ndk_path = /home/runner/.buildozer/android/platform/android-ndk-r25b
          android.sdk_path = /home/runner/.buildozer/android/platform/android-sdk
          EOT
        shell: bash

      # Install Android SDK/NDK dependencies
      - name: Install Android dependencies
        run: |
          sudo apt-get -o Acquire::Retries=3 -o Acquire::http::Timeout="10" update
          sudo apt-get install -y \
            openjdk-17-jdk python3-dev zlib1g-dev libncurses5-dev \
            libncursesw5-dev build-essential cmake libffi-dev cython3 \
            unzip autoconf automake libtool libtool-bin libltdl-dev pkg-config wget
        shell: bash
      
      # Setup Android SDK Command Line Tools (with license acceptance)
      - name: Setup Android SDK
        run: |
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          cd $ANDROID_SDK_ROOT/cmdline-tools
          curl -L -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-13114758_latest.zip
          unzip -q cmdline-tools.zip
          rm -rf latest
          mv cmdline-tools latest
          rm cmdline-tools.zip
          # Set PATH to include sdkmanager
          export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH
          sdkmanager --version
          # Fix for Buildozer: create symlinks
          mkdir -p $ANDROID_SDK_ROOT/tools/bin
          ln -s $ANDROID_SDK_ROOT/cmdline-tools/latest $ANDROID_SDK_ROOT/tools/cmdline-tools
          ln -s $ANDROID_SDK_ROOT/tools/cmdline-tools/bin/sdkmanager $ANDROID_SDK_ROOT/tools/bin/sdkmanager
          # Make sure PATH includes sdkmanager
          export PATH=$ANDROID_SDK_ROOT/tools/bin:$PATH
          # Pre-create licenses directory
          mkdir -p $ANDROID_SDK_ROOT/licenses
          # Accept all licenses
          yes | sdkmanager --licenses --sdk_root=$ANDROID_SDK_ROOT || true
          # Install required packages
          yes | sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-33" "build-tools;35.0.0" || true
          # Verify installation
          ls -la $ANDROID_SDK_ROOT/build-tools
          find $ANDROID_SDK_ROOT/build-tools -name aidl
        shell: bash

      # Download and set up Android NDK
      - name: Setup Android NDK
        run: |
          PLATFORM_DIR="/home/runner/.buildozer/android/platform"
          mkdir -p $PLATFORM_DIR
          cd $PLATFORM_DIR
          curl -L -o android-ndk-r25b-linux.zip https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          unzip -q android-ndk-r25b-linux.zip
          rm android-ndk-r25b-linux.zip
        shell: bash

      # Build APK
      - name: Build Android APK
        run: |
          export M4_PATTERN_ALLOW="LT_SYS_SYMBOL_USCORE"
          export ACLOCAL_PATH=/usr/share/aclocal
          buildozer android debug
        shell: bash

      # Upload artifact
      - name: Upload Android Artifact
        uses: actions/upload-artifact@v4
        with:
          name: grok-farewell-android-${{ env.VERSION }}
          path: bin/*.apk

  ############################################
  # Desktop Build Job (Linux, macOS, Windows)
  ############################################
  build-desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      VERSION: v1.0.0

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - run: echo "python3" > requirements.txt
        shell: bash

      - run: pip install pyinstaller
        shell: bash

      - run: mkdir -p spec
        shell: bash

      - run: pyinstaller --onefile --specpath spec --name grok_farewell grok_farewell.py
        shell: bash

      - name: Run Binary
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            ./dist/grok_farewell.exe
          else
            ./dist/grok_farewell
          fi
        shell: bash

      - name: Create README
        run: echo "Grok Farewell v${{ env.VERSION }} - Built for ${{ runner.os }} on $(date)" > dist/README.txt
        shell: bash

      - name: Zip Artifact (Linux/macOS)
        run: zip -r grok-farewell-${{ runner.os }}-${{ env.VERSION }}.zip dist/
        if: runner.os != 'Windows'
        shell: bash

      - name: Zip Artifact (Windows)
        run: Compress-Archive -Path dist* -DestinationPath "grok-farewell-${{ runner.os }}-${{ env.VERSION }}.zip"
        if: runner.os == 'Windows'
        shell: pwsh

      - uses: actions/upload-artifact@v4
        with:
          name: grok-farewell-${{ runner.os }}-${{ env.VERSION }}
          path: grok-farewell-${{ runner.os }}-${{ env.VERSION }}.zip
