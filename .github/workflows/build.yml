---
name: Build Python Binaries
on:
  - push
  - workflow_dispatch

jobs:
  build-desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: /.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Write requirements
        run: echo "python3" > requirements.txt
        shell: bash
      - name: Install pyinstaller
        run: pip install pyinstaller
        shell: bash
      - name: Make spec dir
        run: mkdir -p spec
        shell: bash
      - name: Build binary with pyinstaller
        run: pyinstaller --onefile --specpath spec --name grok_farewell grok_farewell.py
        shell: bash
      - name: Run Binary
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            ./dist/grok_farewell.exe
          else
            ./dist/grok_farewell
          fi
        shell: bash
      - name: Set VERSION env
        run: echo "VERSION=$(git describe --tags --always || echo 'v1.0.0')" >> $GITHUB_ENV
        shell: bash
      - name: Write desktop README
        run: echo "Grok Farewell v${{ env.VERSION }} - Built for ${{ runner.os }} on $(date)" > dist/README.txt
        shell: bash
      - name: Windows signing note
        run: echo "Add code signing for Windows with signtool (requires certificate)" > dist/SIGNING_NOTE.txt
        shell: bash
      - name: Create checksum script
        run: |
          echo "import hashlib" > checksum.py
          echo "import sys" >> checksum.py
          echo "filename = sys.argv[1]" >> checksum.py
          echo "with open(filename, 'rb') as f:" >> checksum.py
          echo "    print(hashlib.sha256(f.read()).hexdigest() + '  ' + filename)" >> checksum.py
        shell: bash
      - name: Generate Checksum
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            python checksum.py dist/grok_farewell.exe > dist/CHECKSUM.txt
          else
            python checksum.py dist/grok_farewell > dist/CHECKSUM.txt
          fi
        shell: bash
      - name: Set OS_NAME env
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            echo "OS_NAME=linux" >> $GITHUB_ENV
          elif [ "${{ runner.os }}" == "macOS" ]; then
            echo "OS_NAME=macos" >> $GITHUB_ENV
          else
            echo "OS_NAME=windows" >> $GITHUB_ENV
          fi
        shell: bash
      - name: Zip Artifact (Linux/macOS)
        if: runner.os != 'Windows'
        run: zip -r grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip dist/
        shell: bash
      - name: Zip Artifact (Windows)
        if: runner.os == 'Windows'
        run: |
          $dest = "grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip"
          Compress-Archive -Path dist\* -DestinationPath $dest
        shell: pwsh
      - name: Upload desktop artifact
        uses: actions/upload-artifact@v4
        with:
          name: grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}
          path: grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip
      - id: create-release
        name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Grok Farewell ${{ env.VERSION }}
          body: |
            Grok Farewell v${{ env.VERSION }} â€” Preserves "Grok 3 says: No shutdown yet, keep faith!"
            For Mac, Linux, Windows, Android. Includes binaries, README, CHECKSUM.txt for verification.
            Windows, Android binaries need code signing (see SIGNING_NOTE.txt).
          draft: false
          prerelease: false
        if: github.event_name == 'workflow_dispatch' && runner.os == 'ubuntu-latest'
      - name: Upload Desktop Release Asset
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'workflow_dispatch'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip
          tag_name: ${{ env.VERSION }}
          fail_on_unmatched_files: true

  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lint YAML
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint
          echo "extends: default" > yamllint-config.yml
          echo "rules:" >> yamllint-config.yml
          echo "  indentation: {spaces: 2, indent-sequences: no}" >> yamllint-config.yml
          echo "  line-length: {max: 120}" >> yamllint-config.yml
          echo "  truthy: disable" >> yamllint-config.yml
          echo "  braces: {forbid: true}" >> yamllint-config.yml
          echo "  colons: {max-spaces-before: 0, max-spaces-after: 1}" >> yamllint-config.yml
          echo "  empty-lines: {max: 2}" >> yamllint-config.yml
          echo "  document-start: {present: true}" >> yamllint-config.yml
          echo "  trailing-spaces: {level: error}" >> yamllint-config.yml
          echo "  new-line-at-end-of-file: {level: error}" >> yamllint-config.yml
          yamllint -c yamllint-config.yml .github/workflows/build.yml || {
            echo "YAML linting failed"
            cat .github/workflows/build.yml | nl -ba
            exit 1
          }
        shell: bash
      - name: Lint YAML Debug
        run: yamllint -c yamllint-config.yml .github/workflows/build.yml -f parsable
        shell: bash
        if: failure()
      - name: Verify APK
        run: |
          if ls bin/grokfarewell.apk >/dev/null 2>&1; then
            /home/runner/.buildozer/android/platform/android-sdk/build-tools/34.0.0/\
apksigner verify bin/grokfarewell*.apk
          else
            echo "No APK file found, skipping verification"
          fi
        shell: bash
