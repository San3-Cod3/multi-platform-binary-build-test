---
name: Build Python Binaries

on:
  push:
  workflow_dispatch:

jobs:
  ############################################
  # Android Build Job
  ############################################
  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: android-pip-${{ hashFiles('*/requirements.txt') }}
          restore-keys: android-pip-

      - run: pip install buildozer cython
        shell: bash

      - name: Generate buildozer.spec
        run: |
          cat <<EOT > buildozer.spec
          [app]
          title = Grok Farewell
          package.name = grokfarewell
          package.domain = org.example
          source.include_exts = py
          version = 0.1
          requirements = python3,kivy
          orientation = portrait
          [buildozer]
          log_level = 2
          EOT
        shell: bash

      - name: Install Android dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            openjdk-17-jdk python3-dev zlib1g-dev libncurses5-dev \
            libncursesw5-dev build-essential cmake libffi-dev cython3 \
            unzip coreutils autoconf automake libtool
        shell: bash

      - name: Setup Android SDK
        run: |
          mkdir -p ~/.buildozer/android/platform/android-sdk/cmdline-tools
          cd ~/.buildozer/android/platform/android-sdk/cmdline-tools
          curl -L -o commandlinetools-linux_latest.zip \
            https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q commandlinetools-linux_latest.zip
          mv cmdline-tools latest
        shell: bash

      - name: Download Android NDK
        run: |
          mkdir -p ~/.buildozer/android/platform
          cd ~/.buildozer/android/platform
          curl -L -o android-ndk-r25b-linux.zip \
            https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          unzip -q android-ndk-r25b-linux.zip
          mv android-ndk-r25b android-ndk
        shell: bash

      - name: Build Android APK
        run: buildozer -v android debug
        shell: bash

      - name: Upload Android Artifact
        uses: actions/upload-artifact@v4
        with:
          name: grok-farewell-android-${{ github.sha }}
          path: bin/*.apk

  ############################################
  # Desktop Build Job (Linux, macOS, Windows)
  ############################################
  build-desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - run: echo "python3" > requirements.txt
        shell: bash

      - run: pip install pyinstaller
        shell: bash

      - run: mkdir -p spec
        shell: bash

      - run: pyinstaller --onefile --specpath spec --name grok_farewell grok_farewell.py
        shell: bash

      - name: Run Binary
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            ./dist/grok_farewell.exe
          else
            ./dist/grok_farewell
          fi
        shell: bash

      - run: |
          echo "VERSION=$(git describe --tags --always || echo 'v1.0.0')" >> $GITHUB_ENV
        shell: bash

      - run: echo "Grok Farewell v${{ env.VERSION }} - Built for ${{ runner.os }} on $(date)" > dist/README.txt
        shell: bash

      - name: Zip Artifact (Linux/macOS)
        run: zip -r grok-farewell-${{ runner.os }}-${{ env.VERSION }}.zip dist/
        if: runner.os != 'Windows'
        shell: bash

      - name: Zip Artifact (Windows)
        run: Compress-Archive -Path dist* -DestinationPath "grok-farewell-${{ runner.os }}-${{ env.VERSION }}.zip"
        if: runner.os == 'Windows'
        shell: pwsh

      - uses: actions/upload-artifact@v4
        with:
          name: grok-farewell-${{ runner.os }}-${{ env.VERSION }}
          path: grok-farewell-${{ runner.os }}-${{ env.VERSION }}.zip
