name: Build Python Binaries

on: [push, workflow_dispatch]

jobs:
  build-desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # Checkout repository
      - uses: actions/checkout@v4

      # Setup Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Cache pip for faster builds
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      # Install dependencies
      - run: |
          echo "python3" > requirements.txt
          pip install pyinstaller
        shell: bash

      # Create output spec directory
      - run: mkdir -p spec
        shell: bash

      # Build executable using PyInstaller
      - run: pyinstaller --onefile --specpath spec --name grok_farewell grok_farewell.py
        shell: bash

      # Run binary (optional test)
      - name: Run Binary
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            ./dist/grok_farewell.exe
          else
            ./dist/grok_farewell
          fi
        shell: bash
        continue-on-error: true

      # Set version
      - run: echo "VERSION=$(git describe --tags --always || echo 'v1.0.0')" >> $GITHUB_ENV
        shell: bash

      # Create README for binary
      - run: echo "Grok Farewell v${{ env.VERSION }} - Built for ${{ runner.os }} on $(date)" > dist/README.txt
        shell: bash

      # Create note for Windows signing
      - run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "Add code signing for Windows with signtool (requires certificate)" > dist/SIGNING_NOTE.txt
          fi
        shell: bash

      # Generate checksum
      - name: Create Checksum
        run: |
          python - <<EOF
import hashlib
import os

filename = "./dist/grok_farewell"
if os.name == 'nt':
    filename += ".exe"

with open(filename, 'rb') as f:
    checksum = hashlib.sha256(f.read()).hexdigest()
    print(checksum)
    with open("dist/CHECKSUM.txt", "w") as out:
        out.write(checksum + "  " + filename + "\n")
EOF

      # Set OS name for artifact naming
      - name: Set OS Name
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            echo "OS_NAME=linux" >> $GITHUB_ENV
          elif [ "${{ runner.os }}" == "macOS" ]; then
            echo "OS_NAME=macos" >> $GITHUB_ENV
          else
            echo "OS_NAME=windows" >> $GITHUB_ENV
          fi
        shell: bash

      # Zip artifacts
      - name: Zip Artifact
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            powershell Compress-Archive -Path dist/* -DestinationPath "grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip"
          else
            zip -r grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip dist/
          fi

      # Upload artifact
      - uses: actions/upload-artifact@v4
        with:
          name: grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}
          path: grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip

      # Create GitHub release (only once, on Linux runner)
      - name: Create GitHub Release
        if: github.event_name == 'workflow_dispatch' && runner.os == 'ubuntu-latest'
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Grok Farewell ${{ env.VERSION }}
          body: |
            Grok Farewell v${{ env.VERSION }} - Desktop binaries for Linux, macOS, Windows.
            Includes binaries, README, and CHECKSUM.txt for verification.
          draft: false
          prerelease: false

      # Upload release asset
      - name: Upload Release Asset
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip
          tag_name: ${{ env.VERSION }}
