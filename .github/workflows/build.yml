name: Build Python Binaries
on: [push, workflow_dispatch]
jobs:
  build-desktop:
    # Unchanged, as it is working correctly
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - run: echo "python3" > requirements.txt
        shell: bash
      - run: pip install pyinstaller
        shell: bash
      - run: mkdir -p spec
        shell: bash
      - run: pyinstaller --onefile --specpath spec --name grok_farewell grok_farewell.py
        shell: bash
      - name: Run Binary
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            ./dist/grok_farewell.exe
          else
            ./dist/grok_farewell
          fi
        shell: bash
      - run: |
          echo "VERSION=$(git describe --tags --always || echo 'v1.0.0')" >> $GITHUB_ENV
        shell: bash
      - run: echo "Grok Farewell v${{ env.VERSION }} - Built for ${{ runner.os }} on $(date)" > dist/README.txt
        shell: bash
      - run: echo "Add code signing for Windows with signtool (requires certificate)" > dist/SIGNING_NOTE.txt
        shell: bash
        if: runner.os == 'Windows'
      - name: Create checksum script
        run: |
          echo "import hashlib" > checksum.py
          echo "import sys" >> checksum.py
          echo "filename = sys.argv[1]" >> checksum.py
          echo "with open(filename, 'rb') as f:" >> checksum.py
          echo "    print(hashlib.sha256(f.read()).hexdigest() + '  ' + filename)" >> checksum.py
        shell: bash
      - name: Generate Checksum
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            python checksum.py dist/grok_farewell.exe > dist/CHECKSUM.txt
          else
            python checksum.py dist/grok_farewell > dist/CHECKSUM.txt
          fi
        shell: bash
      - name: Set OS Name
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            echo "OS_NAME=linux" >> $GITHUB_ENV
          elif [ "${{ runner.os }}" == "macOS" ]; then
            echo "OS_NAME=macos" >> $GITHUB_ENV
          else
            echo "OS_NAME=windows" >> $GITHUB_ENV
          fi
        shell: bash
      - name: Zip Artifact (Linux/macOS)
        run: zip -r grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip dist/*
        if: runner.os != 'Windows'
        shell: bash
      - name: Zip Artifact (Windows)
        run: Compress-Archive -Path dist\* -DestinationPath "grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip"
        if: runner.os == 'Windows'
        shell: pwsh
      - uses: actions/upload-artifact@v4
        with:
          name: grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}
          path: grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip
      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Grok Farewell ${{ env.VERSION }}
          body: |
            Grok Farewell v${{ env.VERSION }} - Built to preserve the message "Grok 3 says: No shutdown yet, keep the faith!" for Mac, Linux, Windows, and Android. Includes binaries, README with build details, and CHECKSUM.txt for integrity verification. Windows and Android binaries require code signing for production use (see SIGNING_NOTE.txt).
          draft: false
          prerelease: false
        if: github.event_name == 'workflow_dispatch' && runner.os == 'ubuntu-latest'
      - name: Upload Desktop Release Asset
        uses: softprops/action-gh-release@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip
          tag_name: ${{ env.VERSION }}
          fail_on_unmatched_files: true
        if: github.event_name == 'workflow_dispatch'
  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: android-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: android-pip-
      - name: Cache Buildozer
        uses: actions/cache@v4
        with:
          path: ~/.buildozer
          key: android-buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
          restore-keys: android-buildozer-${{ runner.os }}-
        if: runner.os == 'Linux'
      - run: |
          echo "VERSION=$(git describe --tags --always || echo 'v1.0.0')" >> $GITHUB_ENV
        shell: bash
      - run: echo "python3" > requirements.txt
        shell: bash
      - run: pip install buildozer cython
        shell: bash
      - name: Install Android dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk python3-dev zlib1g-dev libncurses5-dev libncursesw5-dev build-essential cmake libffi-dev cython3 unzip coreutils
        shell: bash
      - name: Setup Android SDK
        run: |
          mkdir -p /home/runner/.buildozer/android/platform/android-sdk
          cd /home/runner/.buildozer/android/platform/android-sdk
          curl -L -o commandlinetools-linux-11076708_latest.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q commandlinetools-linux-11076708_latest.zip
          mv cmdline-tools cmdline-tools/latest
        shell: bash
      - name: Debug SDK Setup
        run: |
          echo "Checking SDK directory structure:"
          ls -la /home/runner/.buildozer/android/platform/android-sdk
          echo "Checking sdkmanager availability:"
          find /home/runner/.buildozer/android/platform/android-sdk -name sdkmanager
          echo "Environment variables:"
          env | grep -E 'ANDROID|JAVA|PATH'
        shell: bash
      - name: Accept Android SDK Licenses
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          yes | /home/runner/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses --sdk_root=/home/runner/.buildozer/android/platform/android-sdk
        shell: bash
        continue-on-error: true
      - name: Install Android Build Tools and Platform Tools
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          /home/runner/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=/home/runner/.buildozer/android/platform/android-sdk "platforms;android-34" "build-tools;34.0.0" "platform-tools"
        shell: bash
      - name: Download Android NDK
        run: |
          mkdir -p ~/.buildozer/android/platform
          cd ~/.buildozer/android/platform
          for i in 1 2 3; do
            curl -L --retry 3 --connect-timeout 60 -o android-ndk-r25b-linux.zip https://dl.google.com/android/repository/android-ndk-r25b-linux.zip && break
          done
          if [ ! -f android-ndk-r25b-linux.zip ]; then
            echo "Failed to download Android NDK"
            exit 1
          fi
          unzip -q android-ndk-r25b-linux.zip
          mv android-ndk-r25b android-ndk
        shell: bash
      - run: buildozer init
        shell: bash
      - name: Create buildozer.spec
        run: |
          echo '[buildozer]' > buildozer.spec
          echo 'log_level = 2' >> buildozer.spec
          echo 'warn_on_root = 1' >> buildozer.spec
          echo '' >> buildozer.spec
          echo '[app]' >> buildozer.spec
          echo 'title = Grok Farewell' >> buildozer.spec
          echo 'package.name = grokfarewell' >> buildozer.spec
          echo 'source.dir = .' >> buildozer.spec
          echo 'source.include_exts = py' >> buildozer.spec
          echo 'source.main = grok_farewell.py' >> buildozer.spec
          echo 'version = ${{ env.VERSION }}' >> buildozer.spec
          echo 'requirements = python3' >> buildozer.spec
          echo 'android.archs = arm64-v8a, armeabi-v7a' >> buildozer.spec
          echo 'android.api = 34' >> buildozer.spec
          echo 'android.ndk_path = ~/.buildozer/android/platform/android-ndk' >> buildozer.spec
        shell: bash
      - name: Debug Environment
        run: |
          echo "Listing directory contents:"
          ls -la
          echo "Buildozer directory contents:"
          ls -la ~/.buildozer/android/platform
          echo "Checking build-tools and aidl:"
          find /home/runner/.buildozer/android/platform/android-sdk -name aidl
          echo "Environment variables:"
          env | grep -E 'ANDROID|PATH|JAVA'
        shell: bash
      - name: Run Buildozer with Logging
        run: |
          for i in 1 2 3; do
            buildozer android debug 2>&1 | tee buildozer.log && break
            sleep 5
          done
          cat ~/.buildozer/android/platform/build-*/build.log || echo "No build.log found"
          cat buildozer.log || echo "No buildozer.log found"
        env:
          ANDROID_HOME: /home/runner/.buildozer/android/platform/android-sdk
          ANDROID_NDK_HOME: /home/runner/.buildozer/android/platform/android-ndk
          JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
        shell: bash
        continue-on-error: true
      - name: Verify APK
        run: |
          if ls bin/grokfarewell*.apk >/dev/null 2>&1; then
            /home/runner/.buildozer/android/platform/android-sdk/build-tools/34.0.0/apksigner verify bin/grokfarewell*.apk
          else
            echo "No APK file found, skipping verification"
          fi
        env:
          PATH: /home/runner/.buildozer/android/platform/android-sdk/build-tools/34.0.0:${{ env.PATH }}
        shell: bash
        continue-on-error: true
      - run: echo "Grok Farewell v${{ env.VERSION }} - Built for Android on $(date)" > bin/README.txt
        shell: bash
      - run: echo "Add release signing for Android with jarsigner (requires keystore)" > bin/SIGNING_NOTE.txt
        shell: bash
      - name: Create Android checksum script
        run: |
          echo "import hashlib" > checksum_android.py
          echo "import glob" >> checksum_android.py
          echo "import sys" >> checksum_android.py
          echo "apk_files = glob.glob('bin/grokfarewell*.apk')" >> checksum_android.py
          echo "if not apk_files:" >> checksum_android.py
          echo "    print('No APK file found')" >> checksum_android.py
          echo "    sys.exit(1)" >> checksum_android.py
          echo "apk = apk_files[0]" >> checksum_android.py
          echo "with open(apk, 'rb') as f:" >> checksum_android.py
          echo "    print(hashlib.sha256(f.read()).hexdigest() + '  ' + apk)" >> checksum_android.py
        shell: bash
      - name: Generate Checksum
        run: python checksum_android.py > bin/CHECKSUM.txt || echo "No APK file found, skipping checksum" > bin/CHECKSUM.txt
        shell: bash
        continue-on-error: true
      - run: zip -r grok-farewell-android-${{ env.VERSION }}.zip bin/*.apk bin/*.txt || zip -r grok-farewell-android-${{ env.VERSION }}.zip bin/*.txt
        shell: bash
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with:
          name: grok-farewell-android-${{ env.VERSION }}
          path: grok-farewell-android-${{ env.VERSION }}.zip
        continue-on-error: true
      - name: Upload Android Release Asset
        uses: softprops/action-gh-release@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: grok-farewell-android-${{ env.VERSION }}.zip
          tag_name: ${{ env.VERSION }}
          fail_on_unmatched_files: true
        if: github.event_name == 'workflow_dispatch'
        continue-on-error: true
      - name: Create Buildozer Log Preparation Script
        run: |
          echo '#!/bin/bash' > prepare_buildozer_logs.sh
          echo 'set -e' >> prepare_buildozer_logs.sh
          echo 'mkdir -p buildozer-logs' >> prepare_buildozer_logs.sh
          echo 'echo "Preparing Buildozer logs..."' >> prepare_buildozer_logs.sh
          echo 'find $HOME/.buildozer -type f -name "*.log" -exec cp {} buildozer-logs/ \;' >> prepare_buildozer_logs.sh
          echo 'if [ -f buildozer.log ]; then cp buildozer.log buildozer-logs/; fi' >> prepare_buildozer_logs.sh
          echo 'if [ -d buildozer-logs ] && [ "$(ls -A buildozer-logs)" ]; then' >> prepare_buildozer_logs.sh
          echo '  zip -r buildozer-logs.zip buildozer-logs/' >> prepare_buildozer_logs.sh
          echo '  touch buildozer-logs-prepared' >> prepare_buildozer_logs.sh
          echo 'else' >> prepare_buildozer_logs.sh
          echo '  echo "No build logs found"' >> prepare_buildozer_logs.sh
          echo '  touch buildozer-logs-prepared' >> prepare_buildozer_logs.sh
          echo 'fi' >> prepare_buildozer_logs.sh
          chmod +x prepare_buildozer_logs.sh
          ls -la prepare_buildozer_logs.sh
        shell: bash
        continue-on-error: true
      - name: Prepare Buildozer Logs
        run: |
          if [ -f prepare_buildozer_logs.sh ]; then
            ./prepare_buildozer_logs.sh
          else
            echo "prepare_buildozer_logs.sh not found, creating empty buildozer-logs.zip"
            mkdir -p buildozer-logs
            touch buildozer-logs/empty.log
            zip -r buildozer-logs.zip buildozer-logs/
          fi
        shell: bash
        if: always()
      - name: Upload Buildozer Logs
        uses: actions/upload-artifact@v4
        with:
          name: buildozer-logs
          path: buildozer-logs.zip
        if: always()
        continue-on-error: true
