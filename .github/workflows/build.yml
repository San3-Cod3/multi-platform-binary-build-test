name: Build Python Binaries

on:
  push:
  workflow_dispatch:

jobs:
  ############################################
  # Android Build Job
  ############################################
  build-android:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: /home/runner/.buildozer/android/platform/android-sdk
      ANDROID_NDK_ROOT: /home/runner/.buildozer/android/platform/android-ndk-r25b
      VERSION: v1.0.0
    steps:
      - uses: actions/checkout@v4  # Checkout repo code

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          # Commented out 3.10 security robustness, to better support legacy systems
          #python-version: '3.10'
          python-version: '3.8'  # Downgrade Python to 3.8, for Windows 7 x64 SP1 support

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: android-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: android-pip-

      - run: pip install --upgrade buildozer cython
        shell: bash

      - name: Create main.py entry point () with Kivy App (Android only)
        run: |
          cat << EOT > main.py
          #
          #
          # Creating an Android UI
          from kivy.app import App
          from kivy.uix.label import Label
          # For use later
          #from grok_farewell import some_function  # suppose you have this
          #
          #
          from grok_farewell import *
          #
          import grok_farewell
          #...#
          import sys  # Imported for DEBUG usage
          # DEBUG statement
          print("DEBUG: Android app started", file=sys.stderr)
          class AndroidApp(App):
              def build(self):
                  # Show a simple label â€” you can customize this later
                  return Label(text="Android app running!")
                  # For use when real .py has more features and functions
                  #result = some_function()
                  #return Label(text=f"Result: {result}")

          if __name__ == '__main__':
              AndroidApp().run()
              #...#
          EOT
        shell: bash

      - name: Create custom pyjnius recipe with patch
        run: |
          mkdir -p recipes/pyjnius/patches
          cat << EOF > recipes/pyjnius/__init__.py
          from pythonforandroid.recipe import CythonRecipe
          class PyjniusRecipe(CythonRecipe):
              version = '1.4.2'
              url = 'https://github.com/kivy/pyjnius/archive/{version}.zip'
              call_hostpython_via_targetpython = False
              install_in_hostpython = False
              patches = [('patches/fix-long.patch', 1)]
          recipe = PyjniusRecipe()
          EOF
          cat << 'EOF' > recipes/pyjnius/patches/fix-long.patch
          --- a/jnius/jnius_utils.pxi
          +++ b/jnius/jnius_utils.pxi
          @@ -320,7 +320,7 @@ cdef class _JavaMethod:
                   if r == 'S' or r == 'I':
                       if isinstance(arg, int) or (
          -                        (isinstance(arg, long) and arg < 2147483648)):
          +                        (isinstance(arg, int) and arg < 2147483648)):
                           score += 10
                           continue
          EOF
        shell: bash

      # Generate buildozer.spec on-the-fly
      - name: Generate buildozer.spec
        run: |
          cat <<EOT > buildozer.spec
          [app]
          title = Grok Farewell
          package.name = grokfarewell
          package.domain = org.example
          source.include_exts = py
          source.dir = .
          source.main = main.py
          version = 0.1
          requirements = python3,kivy,pyjnius
          orientation = portrait

          [buildozer]
          log_level = 2
          android.api = 33
          android.ndk_path = /home/runner/.buildozer/android/platform/android-ndk-r25b
          android.sdk_path = /home/runner/.buildozer/android/platform/android-sdk
          EOT
        shell: bash

      # Install Android SDK/NDK dependencies
      - name: Install Android dependencies
        run: |
          sudo apt-get -o Acquire::Retries=3 -o Acquire::http::Timeout="10" update
          sudo apt-get install -y \
            openjdk-17-jdk python3-dev zlib1g-dev libncurses5-dev \
            libncursesw5-dev build-essential cmake libffi-dev cython3 \
            unzip autoconf automake libtool libtool-bin libltdl-dev pkg-config wget
        shell: bash
      
      # Setup Android SDK Command Line Tools (with license acceptance)
      - name: Setup Android SDK
        run: |
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          cd $ANDROID_SDK_ROOT/cmdline-tools
          curl -L -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-13114758_latest.zip
          unzip -q cmdline-tools.zip
          rm -rf latest
          mv cmdline-tools latest
          rm cmdline-tools.zip
          # Set PATH to include sdkmanager
          export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH
          sdkmanager --version
          # Fix for Buildozer: create symlinks
          mkdir -p $ANDROID_SDK_ROOT/tools/bin
          ln -s $ANDROID_SDK_ROOT/cmdline-tools/latest $ANDROID_SDK_ROOT/tools/cmdline-tools
          ln -s $ANDROID_SDK_ROOT/tools/cmdline-tools/bin/sdkmanager $ANDROID_SDK_ROOT/tools/bin/sdkmanager
          # Make sure PATH includes sdkmanager
          export PATH=$ANDROID_SDK_ROOT/tools/bin:$PATH
          # Pre-create licenses directory
          mkdir -p $ANDROID_SDK_ROOT/licenses
          # Accept all licenses
          yes | sdkmanager --licenses --sdk_root=$ANDROID_SDK_ROOT || true
          # Install required packages
          yes | sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-33" "build-tools;35.0.0" || true
          # Verify installation
          ls -la $ANDROID_SDK_ROOT/build-tools
          find $ANDROID_SDK_ROOT/build-tools -name aidl
        shell: bash

      # Download and set up Android NDK
      - name: Setup Android NDK
        run: |
          PLATFORM_DIR="/home/runner/.buildozer/android/platform"
          mkdir -p $PLATFORM_DIR
          cd $PLATFORM_DIR
          curl -L -o android-ndk-r25b-linux.zip https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          unzip -q android-ndk-r25b-linux.zip
          rm android-ndk-r25b-linux.zip
        shell: bash

      # Build APK
      - name: Build Android APK
        run: |
          export M4_PATTERN_ALLOW="LT_SYS_SYMBOL_USCORE"
          export ACLOCAL_PATH=/usr/share/aclocal
          export CYTHON_FORCE_REBUILD=1
          export PYJNIUS_NO_CYTHON=0
          mkdir -p .buildozer/android/platform/python-for-android
          pip install --upgrade Cython==0.29.33 setuptools==59.8.0
          buildozer android debug
        shell: bash

      # Upload artifact
      - name: Upload Android Artifact
        uses: actions/upload-artifact@v4
        with:
          name: grok-farewell-android-${{ env.VERSION }}
          path: bin/*.apk

          #
          #...#
      # Generate a text file with build info
      - name: Generate build info
        run: |
          ( echo "Build info at: $(date)";
            echo "SDK root: ${ANDROID_SDK_ROOT:-N/A}";
            echo "NDK root: ${ANDROID_NDK_ROOT:-N/A}";
            apk_path=$(ls bin/*.apk 2>/dev/null || echo "");
            if [[ -n "$apk_path" ]]; then
              echo "APK size: $(stat -c%s "$apk_path" 2>/dev/null || echo 'unknown') bytes";
              #...#
              #command -v aapt >/dev/null 2>&1 || sudo apt-get update && sudo apt-get install -y aapt;
              # Safety?
              command -v aapt >/dev/null 2>&1 || (sudo apt-get update && sudo apt-get install -y aapt);
              #...#
              if command -v aapt >/dev/null 2>&1; then
                echo -e "\nLauncher activity info:";
                aapt dump xmltree "$apk_path" AndroidManifest.xml 2>/dev/null | grep -A 10 "LAUNCHER" || echo "No launcher activity info found";
              else
                echo "aapt not found, skipping launcher info";
              fi;
            else
              echo "APK not found";
            fi
          ) > build-info.txt
        shell: bash

      # Append additional build info to text file, before GitHub Actions upload
      #- run: echo -e "\n\n------\nLauncher activity info:" >> build-info.txt && (apk_path=$(ls bin/*.apk 2>/dev/null || echo ""); if [[ -n "$apk_path" ]]; then command -v aapt >/dev/null 2>&1 || (sudo apt-get update && sudo apt-get install -y aapt); if command -v aapt >/dev/null 2>&1; then aapt dump xmltree "$apk_path" AndroidManifest.xml 2>/dev/null | awk '/E: activity/ {a=$0} /android.intent.category.LAUNCHER/ && a {print a; print; a=""}' >> build-info.txt || echo "No launcher info" >> build-info.txt; else echo "aapt not found after install" >> build-info.txt; fi; else echo "APK not found" >> build-info.txt; fi)
        #shell: bash
      #- run: "echo -e \"\\n\\n------\\nLauncher activity info:\" >> build-info.txt && apk_path=$(ls bin/*.apk 2>/dev/null || echo \"\"); if [[ -n \"$apk_path\" ]]; then command -v aapt >/dev/null 2>&1 || (sudo apt-get update && sudo apt-get install -y aapt); if command -v aapt >/dev/null 2>&1; then aapt dump xmltree \"$apk_path\" AndroidManifest.xml 2>/dev/null | awk '/E: activity/ {a=\$0} /android.intent.category.LAUNCHER/ && a {print a; print; a=\"\"}' >> build-info.txt || echo \"No launcher info\" >> build-info.txt; else echo \"aapt not found after install\" >> build-info.txt; fi; else echo \"APK not found\" >> build-info.txt; fi"
        #shell: bash
      #- run: echo -e "\\n\\n------\\nLauncher activity info:" >> build-info.txt && apk_path=$(ls bin/*.apk 2>/dev/null || echo "") && if [[ -n "$apk_path" ]]; then command -v aapt >/dev/null 2>&1 || (sudo apt-get update && sudo apt-get install -y aapt); if command -v aapt >/dev/null 2>&1; then aapt dump xmltree "$apk_path" AndroidManifest.xml 2>/dev/null | awk '/E: activity/ {a=\$0} /android.intent.category.LAUNCHER/ && a {print a; print; a=\"\"}' >> build-info.txt || echo "No launcher info" >> build-info.txt; else echo "aapt not found after install" >> build-info.txt; fi; else echo "APK not found" >> build-info.txt; fi
        #shell: bash
      - run: "echo -e \"\\n\\n------\\nLauncher activity info:\" >> build-info.txt && apk_path=$(ls bin/*.apk 2>/dev/null || echo \"\") && if [[ -n \"$apk_path\" ]]; then command -v aapt >/dev/null 2>&1 || (sudo apt-get update && sudo apt-get install -y aapt); if command -v aapt >/dev/null 2>&1; then aapt dump xmltree \"$apk_path\" AndroidManifest.xml 2>/dev/null | awk '/E: activity/ {a=\\$0} /android.intent.category.LAUNCHER/ && a {print a; print; a=\\\"\\\"}' >> build-info.txt || echo \"No launcher info\" >> build-info.txt; else echo \"aapt not found after install\" >> build-info.txt; fi; else echo \"APK not found\" >> build-info.txt; fi"
        shell: bash
        # Extra robust one-liner to catch edge cases
      - run: "echo -e \"\\n\\n------\\nLauncher activity info (UTC $(date -u)):\" >> build-info.txt && apk_path=$(ls bin/*.apk 2>/dev/null | head -n 1 || echo \"\") && if [[ -n \\\"$apk_path\\\" ]]; then command -v aapt >/dev/null 2>&1 || (sudo apt-get update -qq && sudo apt-get install -y aapt >/dev/null); if command -v aapt >/dev/null 2>&1; then (aapt dump xmltree \\\"$apk_path\\\" AndroidManifest.xml 2>/dev/null | awk 'BEGIN{inActivity=0;name=\"\"} /E: activity/ {inActivity=1;name=\"\"} /A: android:name\\(.*\\)=\\\".*\\\"/ && inActivity && name==\"\" {match($0, /\\\".*\\\"/, m); name=m[0]} /android.intent.category.LAUNCHER/ && inActivity {print \"Launcher Activity:\", name; inActivity=0}' >> build-info.txt) || echo \"No launcher info (aapt parse error)\" >> build-info.txt; else echo \"aapt not found after install\" >> build-info.txt; fi; else echo \"APK not found in bin/*.apk\" >> build-info.txt; fi"
        shell: bash

      # Upload: "build-info.txt" artifact text file to GitHub Actions
      - name: Upload build info artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build-info.txt    
          #...#
          #

  ############################################
  # Desktop Build Job (Linux, macOS, Windows)
  ############################################
  build-desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      VERSION: v1.0.0

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          # Commented out 3.10 security robustness, to better support legacy systems
          #python-version: '3.10'
          python-version: '3.8'  # Downgrade Python to 3.8, for Windows 7 x64 SP1 support
          # x86 Windows binary support for x86-only Windows 7 SP1 (32-bit OS/hardware)
          # Commented out original line due to triggering Python 3.8.18 dependency on missing libintl.8.dylib for macOS x64; modified to conditional x86-only for Windows to preserve legacy support without breaking macOS
          #architecture: ${{ runner.os == 'Windows' && 'x86' || 'x64' }}  # x86 Windows binary support for x86-only Windows 7 SP1 (32-bit OS/hardware); omitted due to triggering Python 3.8.18 dependency on missing libintl.8.dylib for macOS x64; modified to conditional x86-only for Windows to preserve legacy support without breaking macOS
          # Commented out due to 'false' architecture error on Ubuntu in v0.1.4
          #architecture: ${{ runner.os == 'Windows' && 'x86' }}  # Set x86 architecture only for Windows (for x86-only Windows 7 SP1 compatibility); omitted for macOS/Linux to default to x64 without triggering libintl.8.dylib dependency issue on macOS; omitted due to 'false' architecture error on Ubuntu in v0.1.4
          architecture: ${{ runner.os == 'Windows' && 'x86' || '' }}  # x86 for Windows, empty for macOS/Linux to use default x64, avoiding 'false' error on Ubuntu and libintl.8.dylib issue on macOS

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - run: echo "python3" > requirements.txt
        shell: bash

      #...#
      - name: Upgrade pip
        #run: python3 -m pip install --upgrade pip
        #run: python3.8 -m pip install --upgrade pip
        #run: ${{ runner.os == 'Windows' && 'python -m pip install --upgrade pip' || 'python3.8 -m pip install --upgrade pip' }}
        run: ${{ runner.os == 'Windows' && 'python -m pip install --upgrade pip' || (runner.os == 'macOS' && 'pip install --upgrade pip') || 'python3.8 -m pip install --upgrade pip' }}  # Platform-specific: python for Windows, plain pip for macOS (default PATH), python3.8 for Linux
        shell: bash
      #...#

      # Commented out previous installation command to avoid unix-like quirks with pip version detection and PATH; uses python3 -m pip to invoke upgraded pip module directly
      #- run: pip install pyinstaller
      #- run: python3 -m pip install pyinstaller  # Use python3 -m pip to invoke upgraded pip module directly, avoiding version warning from old pip executable
      #- run: python3.8 -m pip install pyinstaller
      #- run: ${{ runner.os == 'Windows' && 'python -m pip install pyinstaller' || 'python3.8 -m pip install pyinstaller' }}
      - run: ${{ runner.os == 'Windows' && 'python -m pip install pyinstaller' || (runner.os == 'macOS' && 'pip install pyinstaller') || 'python3.8 -m pip install pyinstaller' }}  # Platform-specific: python for Windows, plain pip for macOS, python3.8 for Linux
        shell: bash

      - run: mkdir -p spec
        shell: bash

      - run: pyinstaller --onefile --specpath spec --name grok_farewell grok_farewell.py
        shell: bash

      - name: Run Binary
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            ./dist/grok_farewell.exe
          else
            ./dist/grok_farewell
          fi
        shell: bash

      - name: Create README
        # Commented out a "v" as 'vv' duplicate appeared in README.txt
        #run: echo "Grok Farewell v${{ env.VERSION }} - Built for ${{ runner.os }} on $(date)" > dist/README.txt
        run: echo "Grok Farewell ${{ env.VERSION }} - Built for ${{ runner.os }} on $(date)" > dist/README.txt
        shell: bash

      - name: Zip Artifact (Linux/macOS)
        run: zip -r grok-farewell-${{ runner.os }}-${{ env.VERSION }}.zip dist/
        if: runner.os != 'Windows'
        shell: bash

      - name: Zip Artifact (Windows)
        run: Compress-Archive -Path dist* -DestinationPath "grok-farewell-${{ runner.os }}-${{ env.VERSION }}.zip"
        if: runner.os == 'Windows'
        shell: pwsh

      - uses: actions/upload-artifact@v4
        with:
          name: grok-farewell-${{ runner.os }}-${{ env.VERSION }}
          path: grok-farewell-${{ runner.os }}-${{ env.VERSION }}.zip
