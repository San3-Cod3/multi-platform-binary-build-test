name: Build Python Binaries
on: [push, workflow_dispatch]
jobs:
  build-desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - run: echo "python3" > requirements.txt
        shell: bash
      - run: pip install pyinstaller
        shell: bash
      - run: pyinstaller --onefile --specpath spec --name grok_farewell grok_farewell.py
        shell: bash
      - name: Run Binary
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            ./dist/grok_farewell.exe
          else
            ./dist/grok_farewell
          fi
        shell: bash
      - run: echo "VERSION=$(git describe --tags --always || echo 'v1.0.0')" >> $GITHUB_ENV
        shell: bash
      - run: echo "Grok Farewell v${{ env.VERSION }} - Built for ${{ runner.os }} on $(date)" > dist/README.txt
        shell: bash
      - run: echo "Add code signing for Windows with signtool (requires certificate)" > dist/SIGNING_NOTE.txt
        shell: bash
        if: runner.os == 'Windows'
      - name: Generate Checksum
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            python -c "import hashlib; with open('dist/grok_farewell.exe', 'rb') as f: print(hashlib.sha256(f.read()).hexdigest() + '  grok_farewell.exe')" > dist/CHECKSUM.txt
          else
            python -c "import hashlib; with open('dist/grok_farewell', 'rb') as f: print(hashlib.sha256(f.read()).hexdigest() + '  grok_farewell')" > dist/CHECKSUM.txt
          fi
        shell: bash
      - name: Set OS Name
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            echo "OS_NAME=linux" >> $GITHUB_ENV
          elif [ "${{ runner.os }}" == "macOS" ]; then
            echo "OS_NAME=macos" >> $GITHUB_ENV
          else
            echo "OS_NAME=windows" >> $GITHUB_ENV
          fi
        shell: bash
      - run: zip -r grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip dist/*
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}
          path: grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip
      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Grok Farewell ${{ env.VERSION }}
          body: |
            Grok Farewell v${{ env.VERSION }} - Built to preserve the message "Grok 3 says: No shutdown yet, keep the faith!" for Mac, Linux, Windows, and Android. Includes binaries, README with build details, and CHECKSUM.txt for integrity verification. Windows and Android binaries require code signing for production use (see SIGNING_NOTE.txt).
          draft: false
          prerelease: false
        if: github.event_name == 'workflow_dispatch' && runner.os == 'ubuntu-latest'
      - name: Upload Desktop Release Asset
        uses: softprops/action-gh-release@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: grok-farewell-${{ env.OS_NAME }}-${{ env.VERSION }}.zip
          tag_name: ${{ env.VERSION }}
          fail_on_unmatched_files: true
        if: github.event_name == 'workflow_dispatch'
  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: android-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: android-pip-
      - name: Cache Buildozer
        uses: actions/cache@v4
        with:
          path: ~/.buildozer
          key: android-buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
          restore-keys: android-buildozer-${{ runner.os }}-
        if: runner.os == 'Linux'
      - run: echo "python3" > requirements.txt
        shell: bash
      - run: pip install buildozer
        shell: bash
      - name: Install Android dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk python3-dev zlib1g-dev libncurses5-dev libncursesw5-dev build-essential cmake libffi-dev
        shell: bash
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          sdk-version: '34'
      - run: buildozer init
        shell: bash
      - name: Create buildozer.spec
        run: |
          echo '[buildozer]' > buildozer.spec
          echo 'log_level = 2' >> buildozer.spec
          echo 'warn_on_root = 1' >> buildozer.spec
          echo '' >> buildozer.spec
          echo '[app]' >> buildozer.spec
          echo 'title = Grok Farewell' >> buildozer.spec
          echo 'package.name = grokfarewell' >> buildozer.spec
          echo 'source.dir = .' >> buildozer.spec
          echo 'source.include_exts = py' >> buildozer.spec
          echo 'requirements = python3' >> buildozer.spec
          echo 'android.archs = arm64-v8a, armeabi-v7a' >> buildozer.spec
          echo 'android.api = 34' >> buildozer.spec
          echo 'android.ndk = 25.2.9519653' >> buildozer.spec
        shell: bash
      - run: |
          for i in 1 2 3; do buildozer android debug && break; cat ~/.buildozer/android/platform/build-*/build.log; done
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        shell: bash
      - run: apksigner verify bin/grokfarewell*.apk
        shell: bash
      - run: echo "VERSION=$(git describe --tags --always || echo 'v1.0.0')" >> $GITHUB_ENV
        shell: bash
      - run: echo "Grok Farewell v${{ env.VERSION }} - Built for Android on $(date)" > bin/README.txt
        shell: bash
      - run: echo "Add release signing for Android with jarsigner (requires keystore)" > bin/SIGNING_NOTE.txt
        shell: bash
      - run: python -c "import hashlib, glob; with open(glob.glob('bin/grokfarewell*.apk')[0], 'rb') as f: print(hashlib.sha256(f.read()).hexdigest() + '  ' + glob.glob('bin/grokfarewell*.apk')[0])" > bin/CHECKSUM.txt
        shell: bash
      - run: zip -r grok-farewell-android-${{ env.VERSION }}.zip bin/*.apk bin/*.txt
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: grok-farewell-android-${{ env.VERSION }}
          path: grok-farewell-android-${{ env.VERSION }}.zip
      - name: Upload Android Release Asset
        uses: softprops/action-gh-release@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: grok-farewell-android-${{ env.VERSION }}.zip
          tag_name: ${{ env.VERSION }}
          fail_on_unmatched_files: true
        if: github.event_name == 'workflow_dispatch'
      - name: Create Buildozer Log Preparation Script
        run: |
          echo '#!/bin/bash' > prepare_buildozer_logs.sh
          echo 'set -e' >> prepare_buildozer_logs.sh
          echo 'if ls -l $HOME/.buildozer/android/platform/build-*/build.log >/dev/null 2>&1; then' >> prepare_buildozer_logs.sh
          echo '  echo "Preparing Buildozer logs..."' >> prepare_buildozer_logs.sh
          echo '  mkdir -p buildozer-logs' >> prepare_buildozer_logs.sh
          echo '  cp $HOME/.buildozer/android/platform/build-*/build.log buildozer-logs/' >> prepare_buildozer_logs.sh
          echo '  zip -r buildozer-logs.zip buildozer-logs/' >> prepare_buildozer_logs.sh
          echo '  echo "UPLOAD_PATH=buildozer-logs.zip" >> $GITHUB_ENV' >> prepare_buildozer_logs.sh
          echo 'else' >> prepare_buildozer_logs.sh
          echo '  echo "No build logs found"' >> prepare_buildozer_logs.sh
          echo '  echo "UPLOAD_PATH=" >> $GITHUB_ENV' >> prepare_buildozer_logs.sh
          echo 'fi' >> prepare_buildozer_logs.sh
          chmod +x prepare_buildozer_logs.sh
        shell: bash
      - name: Prepare Buildozer Logs
        run: ./prepare_buildozer_logs.sh
        shell: bash
      - name: Upload Buildozer Logs on Failure
        uses: actions/upload-artifact@v4
        if: failure() && env.UPLOAD_PATH != ''
        with:
          name: buildozer-logs
          path: ${{ env.UPLOAD_PATH }}
